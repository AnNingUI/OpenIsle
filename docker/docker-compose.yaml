services:
  # MySQL service
  mysql:
    image: mysql:8.0
    container_name: openisle-mysql
    restart: always
    env_file:
      - ../.env
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ../backend/src/main/resources/db/init:/docker-entrypoint-initdb.d
    networks:
      - openisle-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s

  # OpenSearch Service
  opensearch:
    build:
      context: .
      dockerfile: opensearch.Dockerfile
    container_name: opensearch
    environment:
      - cluster.name=os-single
      - node.name=os-node-1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g
      - DISABLE_SECURITY_PLUGIN=true
      - cluster.blocks.create_index=false
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile:  { soft: 65536, hard: 65536 }
    volumes:
      - ./data:/usr/share/opensearch/data
      - ./snapshots:/snapshots
    ports:
      - "${OPENSEARCH_PORT:-9200}:9200"
      - "${OPENSEARCH_METRICS_PORT:-9600}:9600"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:9200/_cluster/health >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s
    networks:
      - openisle-network

  dashboards:
    image: opensearchproject/opensearch-dashboards:3.0.0
    container_name: os-dashboards
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    ports:
      - "${OPENSEARCH_DASHBOARDS_PORT:-5601}:5601"
    depends_on:
      - opensearch
    restart: unless-stopped
    networks:
      - openisle-network 

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: openisle-rabbitmq
    restart: unless-stopped
    env_file:
      - ../.env
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - openisle-network

  redis:
    image: redis:7
    container_name: openisle-redis
    restart: unless-stopped
    env_file:
      - ../.env
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - openisle-network

  # Java spring boot service
  springboot:
    image: maven:3.9-eclipse-temurin-17
    container_name: openisle-springboot
    working_dir: /app
    env_file:
      - ../.env
    ports:
      - "${SERVER_PORT:-8080}:${SERVER_PORT:-8080}"
    volumes:
      - ../backend:/app
      - maven-repo:/root/.m2
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
      websocket-service:
        condition: service_started
      opensearch:
        condition: service_healthy
    command: mvn clean spring-boot:run -Dmaven.test.skip=true
    networks:
      - openisle-network

  websocket-service:
    image: maven:3.9-eclipse-temurin-17
    container_name: openisle-websocket
    working_dir: /app
    env_file:
      - ../.env
    ports:
      - "${WEBSOCKET_PORT:-8082}:${WEBSOCKET_PORT:-8082}"
    volumes:
      - ../websocket_service:/app
      - websocket-maven-repo:/root/.m2
    depends_on:
      - rabbitmq
    command: mvn clean spring-boot:run -Dmaven.test.skip=true
    networks:
      - openisle-network

  frontend_dev:
    image: node:20
    container_name: openisle-frontend-dev
    working_dir: /app
    env_file:
      - ../.env
    command: sh -c "npm install && npm run dev"
    volumes:
      - ../frontend_nuxt:/app
      - frontend-node-modules:/app/node_modules
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - springboot
      - websocket-service
    networks:
      - openisle-network
    profiles:
      - dev

  frontend_service:
    build:
      context: ..
      dockerfile: frontend-service.Dockerfile
    container_name: openisle-frontend-service
    working_dir: /app
    env_file:
      - ../.env
    volumes:
      - ../frontend_nuxt:/app
      - frontend-service-node-modules:/app/node_modules
      - frontend-static:/var/www/openisle
    ports:
      - "${FRONTEND_SERVICE_PORT:-3001}:3000"
    depends_on:
      - springboot
      - websocket-service
    networks:
      - openisle-network
    profiles:
      - service

networks:
  openisle-network:
    driver: bridge

volumes:
  mysql-data:
  maven-repo:
  redis-data:
  rabbitmq-data:
  websocket-maven-repo:
  frontend-node-modules:
  frontend-service-node-modules:
  frontend-static:
